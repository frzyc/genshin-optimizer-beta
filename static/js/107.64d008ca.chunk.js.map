{"version":3,"file":"static/js/107.64d008ca.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ImportExport.js","../node_modules/@mui/icons-material/esm/Upload.js","../node_modules/@mui/icons-material/esm/Delete.js","Database/exim.ts","Database/exports/good.ts","../node_modules/@mui/icons-material/esm/JoinLeft.js","../node_modules/@mui/icons-material/esm/JoinFull.js","../node_modules/@mui/icons-material/esm/Splitscreen.js","../node_modules/@mui/icons-material/esm/MergeType.js","Database/imports/good.ts","Database/imports/merge.ts","PageSettings/UploadCard.tsx","PageSettings/DatabaseCard.tsx","PageSettings/LanguageCard.tsx","PageSettings/TCToggleCard.tsx","PageSettings/index.tsx","ReactHooks/useCharSelectionCallback.tsx","stateInit.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 3 5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"\n}), 'ImportExport');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import type { IArtifact } from \"../Types/artifact\"\r\nimport type { ICharacter } from \"../Types/character\"\r\nimport type { IWeapon } from \"../Types/weapon\"\r\n\r\nexport const GOSource = \"Genshin Optimizer\" as const\r\n\r\nfunction newCounter<T>(): ImportResultCounter<T> {\r\n  return { import: [], invalid: [], new: [], updated: [], unchanged: [], removed: [], dbTotal: 0, notInImport: 0 }\r\n}\r\n\r\nexport function newImportResult(source: string): ImportResult {\r\n  return { type: \"GOOD\", source, artifacts: newCounter(), weapons: newCounter(), characters: newCounter() }\r\n}\r\nexport type IGOOD = {\r\n  format: \"GOOD\"\r\n  source: string\r\n  version: 1\r\n  characters?: any[]\r\n  artifacts?: any[]\r\n  weapons?: any[]\r\n}\r\nexport type IGO = {\r\n  dbVersion: number\r\n  source: typeof GOSource\r\n  states?: object[]\r\n  buildSettings?: object[]\r\n}\r\n\r\nexport type ImportResultCounter<T> = {\r\n  import: T[], // total # in file\r\n  new: T[],\r\n  updated: T[], // Use new object\r\n  unchanged: T[], // Use new object\r\n  removed: T[],\r\n  invalid: T[],\r\n  dbTotal: number,\r\n  notInImport: number,\r\n}\r\nexport type ImportResult = {\r\n  type: \"GOOD\",\r\n  source: string,\r\n  artifacts: ImportResultCounter<IArtifact>,\r\n  weapons: ImportResultCounter<IWeapon>,\r\n  characters: ImportResultCounter<ICharacter>,\r\n  extra?: {\r\n    buildSettings: object[]\r\n    states: object[]\r\n  }\r\n}\r\n","\r\nimport { DBStorage } from \"../DBStorage\";\r\nimport { BuildSetting } from \"../Data/BuildsettingData\";\r\nimport { GOSource, IGO, IGOOD } from \"../exim\";\r\nimport { currentDBVersion } from \"../imports/migrate\";\r\n\r\nexport function exportGOOD(storage: DBStorage): IGOOD & IGO {\r\n  const artifactIDs = new Map<string, number>()\r\n  const artifacts = storage.entries\r\n    .filter(([key]) => key.startsWith(\"artifact_\"))\r\n    .map(([id, value], i) => {\r\n      artifactIDs.set(id, i)\r\n      return JSON.parse(value)\r\n    })\r\n  return {\r\n    format: \"GOOD\",\r\n    dbVersion: currentDBVersion,\r\n    source: GOSource,\r\n    version: 1,\r\n    characters: storage.entries\r\n      .filter(([key]) => key.startsWith(\"char_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    artifacts,\r\n    weapons: storage.entries\r\n      .filter(([key]) => key.startsWith(\"weapon_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    states: storage.entries\r\n      .filter(([key]) => key.startsWith(\"state_\"))\r\n      .map(([key, value]) => ({ ...JSON.parse(value), key: key.split(\"state_\")[1] })),\r\n    buildSettings: storage.entries\r\n      .filter(([key]) => key.startsWith(\"buildSetting_\"))\r\n      .map(([key, value]) => {\r\n        const result: BuildSetting = { ...JSON.parse(value), key: key.split(\"buildSetting_\")[1] }\r\n        // Make sure the artifact ids match the new ids after import\r\n        result.builds = result.builds.map(x => x.map(x => artifactIDs.has(x) ? `artifact_${artifactIDs.get(x)}` : \"\").filter(x => x))\r\n        return result\r\n      }),\r\n  }\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"ellipse\", {\n  cx: \"12\",\n  cy: \"12\",\n  rx: \"3\",\n  ry: \"5.74\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M7.5 12c0-.97.23-4.16 3.03-6.5C9.75 5.19 8.9 5 8 5c-3.86 0-7 3.14-7 7s3.14 7 7 7c.9 0 1.75-.19 2.53-.5-2.8-2.34-3.03-5.53-3.03-6.5zM16 5c-.9 0-1.75.19-2.53.5.61.51 1.1 1.07 1.49 1.63.33-.08.68-.13 1.04-.13 2.76 0 5 2.24 5 5s-2.24 5-5 5c-.36 0-.71-.05-1.04-.13-.39.56-.88 1.12-1.49 1.63.78.31 1.63.5 2.53.5 3.86 0 7-3.14 7-7s-3.14-7-7-7z\"\n}, \"1\")], 'JoinLeft');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"ellipse\", {\n  cx: \"12\",\n  cy: \"12\",\n  rx: \"3\",\n  ry: \"5.74\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M7.5 12c0-.97.23-4.16 3.03-6.5C9.75 5.19 8.9 5 8 5c-3.86 0-7 3.14-7 7s3.14 7 7 7c.9 0 1.75-.19 2.53-.5-2.8-2.34-3.03-5.53-3.03-6.5zM16 5c-.9 0-1.75.19-2.53.5 2.8 2.34 3.03 5.53 3.03 6.5 0 .97-.23 4.16-3.03 6.5.78.31 1.63.5 2.53.5 3.86 0 7-3.14 7-7s-3.14-7-7-7z\"\n}, \"1\")], 'JoinFull');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 4v5H6V4h12m0-2H6c-1.1 0-2 .9-2 2v5c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 13v5H6v-5h12m0-2H6c-1.1 0-2 .9-2 2v5c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-5c0-1.1-.9-2-2-2z\"\n}), 'Splitscreen');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 20.41 18.41 19 15 15.59 13.59 17 17 20.41zM7.5 8H11v5.59L5.59 19 7 20.41l6-6V8h3.5L12 3.5 7.5 8z\"\n}), 'MergeType');","import { GOSource, IGO, IGOOD, ImportResult, newImportResult } from \"../exim\";\r\nimport { parseArtifact, parseCharacter, parseWeapon } from \"./parse\";\r\n\r\n// MIGRATION STEP: Always keep parsing in sync with GOODv1 format\r\n\r\nexport function importGOOD(data: IGOOD): ImportResult | undefined {\r\n  switch (data.version) {\r\n    case 1: return importGOOD1(data)\r\n  }\r\n}\r\n\r\n/**\r\n * Parse GOODv1 data format into a parsed data of the version specified in `data`.\r\n * If the DB version is not specified, the default version is used.\r\n */\r\nfunction importGOOD1(data: IGOOD): ImportResult | undefined {\r\n  const source = data.source ?? \"Unknown\"\r\n  const result: ImportResult = newImportResult(source)\r\n\r\n  if (data.artifacts) data.artifacts.forEach((a, i) => {\r\n    const parsed = parseArtifact(a)\r\n    if (!parsed) result.artifacts.invalid.push(a)\r\n    else result.artifacts.import.push(a)\r\n  })\r\n\r\n  if (data.weapons) data.weapons.forEach((w, i) => {\r\n    const parsed = parseWeapon(w)\r\n    if (!parsed) result.weapons.invalid.push(w)\r\n    else result.weapons.import.push(w)\r\n  })\r\n\r\n  if (data.characters) data.characters.forEach(c => {\r\n    const parsed = parseCharacter(c)\r\n    if (!parsed) result.characters.invalid.push(c)\r\n    else result.characters.import.push(c)\r\n  })\r\n\r\n  if (source === GOSource) {\r\n    result.extra = { buildSettings: [], states: [] }\r\n    const { states, buildSettings } = data as unknown as IGO\r\n    states && states.forEach(s =>\r\n      result.extra!.buildSettings.push({ ...s, builds: [], buildDate: 0, }))\r\n    buildSettings && buildSettings.forEach(b =>\r\n      result.extra!.buildSettings.push({ ...b, builds: [], buildDate: 0, }))\r\n  }\r\n  return result\r\n}\r\n","import { CharacterKey } from \"pipeline\";\r\nimport { initialCharacter } from \"../../ReactHooks/useCharSelectionCallback\";\r\nimport { ArtCharDatabase } from \"../Database\";\r\nimport { GOSource, ImportResult } from \"../exim\";\r\n\r\n/**\r\n * Merge the parsed storage (`result`) of the current DB version with existing\r\n * database (`base`) to create a new (parsed) storage. If the data for art/char/weapon\r\n * exists in `result`, it will be merged with `base` on best-effort basis. The\r\n * information in `result` takes precedence when the data exists in both locations.\r\n *\r\n * `result` must be using the latest DB format, i.e., it must already be `migrate`d.\r\n *\r\n * TODO:\r\n * This can be easily extended to include options whether to merge\r\n * each category (art/char/weapon) or to force the `result` data or `base` data.\r\n */\r\nexport function merge(result: ImportResult, base: ArtCharDatabase, partial: boolean, disjoint: boolean) {\r\n  const { source, artifacts: artCounter, weapons: weaponCounter, characters: charCounter, extra } = result\r\n\r\n  if (charCounter.import.length) {\r\n    const idsToRemove = new Set(base.chars.keys)\r\n    charCounter.import.forEach(char => {\r\n      const match = base.chars.get(char.key)\r\n      if (match) {\r\n        idsToRemove.delete(match.key)\r\n        charCounter.updated.push(char)\r\n        if (source === GOSource) {\r\n          base.chars.set(char.key, char)\r\n        } else {//doenst have valid GO-specific metadata\r\n          const { key, level, constellation, ascension, talent, ...matchRest } = match\r\n          base.chars.set(key, { ...char, ...matchRest })\r\n        }\r\n      } else {\r\n        charCounter.new.push(char)\r\n        base.chars.set(char.key, char)\r\n      }\r\n    })\r\n\r\n    const idtoRemoveArr = Array.from(idsToRemove)\r\n    if (partial || disjoint) charCounter.notInImport = idtoRemoveArr.length\r\n    else charCounter.removed = idtoRemoveArr.map(k => {\r\n      const char = base.chars.get(k)!\r\n      base.chars.remove(k)\r\n      return char\r\n    })\r\n    charCounter.unchanged = []\r\n  } else charCounter.notInImport = base.chars.values.length\r\n  const migrateLocation = (matchId: string, location: CharacterKey) => {\r\n    if (!base.chars.get(location)) {\r\n      const char = initialCharacter(location)\r\n      base.chars.set(location, char)\r\n      charCounter.new.push(char)\r\n    }\r\n  }\r\n  // Match artifacts for counter, metadata, and locations\r\n  if (artCounter.import.length) {\r\n    const idsToRemove = new Set(base.arts.values.map(a => a.id))\r\n    const hasLocations = artCounter.import.some(a => a.location)\r\n    artCounter.import.forEach(art => {\r\n      let { duplicated, upgraded } = disjoint ? { duplicated: [], upgraded: [] } : base.arts.findDups(art)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\r\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\r\n\r\n      if (duplicated[0] || upgraded[0]) {\r\n        const match = duplicated[0] || upgraded[0]\r\n        idsToRemove.delete(match.id)\r\n        hasLocations && art.location && migrateLocation(match.id, art.location)\r\n        art.location && base.arts.set(match.id, { location: art.location })\r\n        duplicated[0] ? artCounter.unchanged.push(art) : artCounter.updated.push(art)\r\n      } else {\r\n        const id = base.arts.new({ ...art, location: \"\" })\r\n        art.location && migrateLocation(id, art.location)\r\n        art.location && base.arts.set(id, { location: art.location })\r\n        artCounter.new.push(art)\r\n      }\r\n    })\r\n    const idtoRemoveArr = Array.from(idsToRemove)\r\n    if (partial || disjoint) artCounter.notInImport = idtoRemoveArr.length\r\n    else artCounter.removed = idtoRemoveArr.map(k => {\r\n      const a = base.arts.get(k)!\r\n      base.arts.remove(k)\r\n      return a\r\n    })\r\n  } else artCounter.notInImport = base.arts.values.length\r\n\r\n  // Match weapons for counter, metadata, and locations\r\n  if (weaponCounter.import.length) {\r\n    const idsToRemove = new Set(base.weapons.values.map(w => w.id))\r\n    const hasLocations = weaponCounter.import.some(weapon => weapon.location)\r\n    weaponCounter.import.forEach(weapon => {\r\n      let { duplicated, upgraded } = disjoint ? { duplicated: [], upgraded: [] } : base.weapons.findDup(weapon)\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\r\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\r\n\r\n      if (duplicated[0] || upgraded[0]) {\r\n        const match = duplicated[0] || upgraded[0]\r\n        idsToRemove.delete(match.id)\r\n        hasLocations && weapon.location && migrateLocation(match.id, weapon.location)\r\n        weapon.location && base.weapons.set(match.id, { location: weapon.location })\r\n        duplicated[0] ? weaponCounter.unchanged.push(weapon) : weaponCounter.updated.push(weapon)\r\n      } else {\r\n        const id = base.weapons.new({ ...weapon, location: \"\" })\r\n        weapon.location && migrateLocation(id, weapon.location)\r\n        weapon.location && base.weapons.set(id, { location: weapon.location })\r\n        weaponCounter.new.push(weapon)\r\n      }\r\n    })\r\n    const idtoRemoveArr = Array.from(idsToRemove)\r\n    if (partial || disjoint) weaponCounter.notInImport = idtoRemoveArr.length\r\n    else weaponCounter.removed = idtoRemoveArr.map(k => {\r\n      const a = base.weapons.get(k)!\r\n      base.weapons.remove(k)\r\n      return a\r\n    })\r\n  } else weaponCounter.notInImport = base.weapons.values.length\r\n\r\n  //ensure equipment is still good\r\n  weaponCounter.new.push(...base.weapons.ensureEquipment())\r\n\r\n  artCounter.dbTotal = base.arts.values.length\r\n  weaponCounter.dbTotal = base.weapons.values.length\r\n  charCounter.dbTotal = base.chars.values.length\r\n\r\n  // import extras\r\n  if (extra) {\r\n    const { states, buildSettings } = extra\r\n    states.forEach(s => {\r\n      const { key, ...rest } = s as any\r\n      if (!key) return\r\n      base.states.set(key, rest)\r\n    })\r\n    buildSettings.forEach(b => {\r\n      const { key, ...rest } = b as any\r\n      if (!key) return\r\n      // Do not import builds\r\n      base.states.set(key, { ...rest, builds: [], buildDate: 0, })\r\n    })\r\n  }\r\n  return base\r\n}\r\n","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { JoinFull, JoinLeft, MergeType, Splitscreen, Upload } from '@mui/icons-material'\r\nimport { Box, Button, CardContent, Divider, Grid, styled, Tooltip, Typography } from '@mui/material'\r\nimport { useCallback, useContext, useMemo, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport { DBLocalStorage, SandboxStorage } from '../Database/DBStorage'\r\nimport { ImportResult, ImportResultCounter } from '../Database/exim'\r\nimport { importGOOD } from '../Database/imports/good'\r\nimport { merge } from '../Database/imports/merge'\r\n\r\nconst InvisInput = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadCard({ onReplace }: { onReplace: () => void }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\");\r\n  const [data, setdata] = useState(\"\")\r\n  const [filename, setfilename] = useState(\"\")\r\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\r\n  const [partial, setPartial] = useState(false)\r\n  const [disjoint, setDisjoint] = useState(false)\r\n  const { importResult, importedDatabase } = useMemo(() => {\r\n    if (!data) return\r\n    let parsed: any\r\n    try {\r\n      parsed = JSON.parse(data)\r\n      if (typeof parsed !== \"object\") {\r\n        setErrorMsg(\"uploadCard.error.jsonParse\")\r\n        return\r\n      }\r\n    } catch (e) {\r\n      setErrorMsg(\"uploadCard.error.jsonParse\")\r\n      return\r\n    }\r\n    // Figure out the file format\r\n    if (parsed.format === \"GOOD\") {\r\n      // Parse as GOOD format\r\n      const imported = importGOOD(parsed)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.goInvalid\")\r\n        return\r\n      }\r\n      const copyStorage = new SandboxStorage()\r\n      copyStorage.copyFrom(database.storage)\r\n      return { importResult: imported, importedDatabase: merge(imported, new ArtCharDatabase(copyStorage), partial, disjoint) }\r\n    }\r\n    setErrorMsg(\"uploadCard.error.unknown\")\r\n    return\r\n  }, [data, database, partial, disjoint]) ?? {}\r\n\r\n  const reset = () => {\r\n    setdata(\"\")\r\n    setfilename(\"\")\r\n    onReplace()\r\n  }\r\n  const onUpload = async e => {\r\n    const file = e.target.files[0]\r\n    e.target.value = null // reset the value so the same file can be uploaded again...\r\n    if (file) setfilename(file.name)\r\n    const reader = new FileReader()\r\n    reader.onload = () => setdata(reader.result as string)\r\n    reader.readAsText(file)\r\n  }\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\r\n    <CardContent>\r\n      <Grid container spacing={2} sx={{ mb: 1 }}>\r\n        <Grid item>\r\n          <label htmlFor=\"icon-button-file\">\r\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\r\n            <Button component=\"span\" startIcon={<Upload />}>Upload</Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <CardDark sx={{ px: 2, py: 1 }}>\r\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\r\n          </CardDark>\r\n        </Grid>\r\n      </Grid>\r\n      <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n        <Tooltip title={<Box><Trans t={t} i18nKey=\"settings:uploadCard.tooltip.partial\" >\r\n          <Typography variant=\"h6\">Full Import</Typography>\r\n          <Typography gutterBottom>Assume the import to be the full inventory. Artifacts/weapons in GO that doesnt exist in the import are deleted.</Typography>\r\n          <Typography variant=\"h6\">Partial Import</Typography>\r\n          <Typography>Assume the import is a partial inventory. Artifacts/weapons are updated/deduplicated(depending on setting), but not deleted.</Typography>\r\n        </Trans></Box>} placement='top' arrow >\r\n          <Box sx={{ flexGrow: 1, flexBasis: \"10em\" }}><Button fullWidth disabled={!data} onClick={() => setPartial(!partial)} startIcon={partial ? <JoinLeft /> : <JoinFull />} >\r\n            {partial ? t`uploadCard.buttons.partialImport` : t`uploadCard.buttons.fullImport`}\r\n          </Button></Box>\r\n        </Tooltip>\r\n        <Tooltip title={<Box><Trans t={t} i18nKey=\"settings:uploadCard.tooltip.disjoint\" >\r\n          <Typography variant=\"h6\">Merge Import</Typography>\r\n          <Typography gutterBottom>Find upgrade/duplicates in the GO inventory and merge the import into GO.</Typography>\r\n          <Typography variant=\"h6\">Disjoint Import</Typography>\r\n          <Typography>Assume the import does not have any upgrades/duplicates, the import is merged into GO without upgrade/duplicate detection.</Typography>\r\n        </Trans></Box>} placement='top' arrow >\r\n          <Box sx={{ flexGrow: 1, flexBasis: \"10em\" }}><Button fullWidth disabled={!data} onClick={() => setDisjoint(!disjoint)} startIcon={disjoint ? <Splitscreen /> : <MergeType />}>\r\n            {disjoint ? t`uploadCard.buttons.disjointImport` : t`uploadCard.buttons.mergeImport`}\r\n          </Button></Box>\r\n        </Tooltip>\r\n      </Box>\r\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\r\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\r\n      {importResult ? <GOODUploadInfo importResult={importResult} /> : t(errorMsg)}\r\n    </CardContent>\r\n    <GOUploadAction database={importedDatabase} reset={reset} />\r\n  </CardLight>\r\n}\r\n\r\nfunction GOODUploadInfo({ importResult: { source, artifacts, characters, weapons } }: { importResult: ImportResult }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      <Grid container spacing={2}>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={artifacts} type=\"arts\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={weapons} type=\"weapons\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={characters} type=\"chars\" />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\nfunction MergeResult({ result, type }: { result: ImportResultCounter<any>, type: string }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  const total = result.import.length\r\n  return <CardLight >\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey={`count.${type}`} /> {total}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new.length}</strong> / {total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.updated.length}</strong> / {total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged.length}</strong> / {total}</Typography>\r\n      {!!result.removed.length && <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.removed.length}</strong></Typography>}\r\n      {!!result.notInImport && <Typography><Trans t={t} i18nKey=\"count.notInImport\" /> <strong>{result.notInImport}</strong></Typography>}\r\n      <Typography><Trans t={t} i18nKey=\"count.dbTotal\" /> <strong>{result.dbTotal}</strong></Typography>\r\n      {!!result.invalid?.length && <div>\r\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {total}</Typography>\r\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\r\n      </div>}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nfunction GOUploadAction({ database, reset }: { database?: ArtCharDatabase, reset: () => void }) {\r\n  const { setDatabase } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\")\r\n  const replaceDB = useCallback(() => {\r\n    if (!database) return\r\n    const dbLStorage = new DBLocalStorage(localStorage)\r\n    dbLStorage.copyFrom(database.storage)\r\n    database.storage = dbLStorage\r\n    setDatabase(database)\r\n    reset()\r\n  }, [database, reset, setDatabase])\r\n\r\n\r\n  return <><Divider /><CardContent sx={{ py: 1 }}>\r\n    <Button color={database ? \"success\" : \"error\"} disabled={!database} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\r\n  </CardContent></>\r\n}\r\n","import { faClipboard } from '@fortawesome/free-solid-svg-icons'\r\nimport { Delete, Download, ImportExport, Upload } from '@mui/icons-material'\r\nimport { Button, CardContent, Chip, Divider, Grid, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { StyledInputBase } from '../Components/CustomNumberInput'\r\nimport FontAwesomeSvgIcon from '../Components/FontAwesomeSvgIcon'\r\nimport ModalWrapper from '../Components/ModalWrapper'\r\nimport { ArtCharDatabase, DatabaseContext, DatabaseContextObj } from \"../Database/Database\"\r\nimport { ExtraStorage } from '../Database/DBStorage'\r\nimport { exportGOOD } from '../Database/exports/good'\r\nimport useBoolState from '../ReactHooks/useBoolState'\r\nimport useDBState, { dbMetaInit } from '../ReactHooks/useDBState'\r\nimport { range } from '../Util/Util'\r\nimport UploadCard from './UploadCard'\r\n\r\nexport default function DatabaseCard() {\r\n  const databaseContextObj = useContext(DatabaseContext)\r\n  const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n  const { t } = useTranslation([\"settings\"]);\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        {t`DatabaseCard.title`}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <Grid container spacing={2} columns={{ xs: 1, md: 2, }}>\r\n        {range(1, 4).map(i => <Grid key={i} item xs={1}>\r\n          {i === dbIndex ? <DataCard index={i} /> :\r\n            <ExtraDatabaseWrapper index={i}>\r\n              <DataCard index={i} databaseContextObj={databaseContextObj} />\r\n            </ExtraDatabaseWrapper>}\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent >\r\n  </CardLight >\r\n}\r\nfunction ExtraDatabaseWrapper({ index, children }) {\r\n  const [database, setDatabase] = useState(() => {\r\n    const dbName = `extraDatabase_${index}`\r\n    const storage = new ExtraStorage(dbName)\r\n    const dbObj = JSON.parse(localStorage.getItem(dbName) ?? `{ \"dbIndex\": \"${index}\" }`)\r\n    storage.setStorage(dbObj)\r\n\r\n    // A bit of preventive programming\r\n    storage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    const db = new ArtCharDatabase(storage)\r\n    storage.saveStorage()\r\n    return db\r\n  })\r\n\r\n  return <DatabaseContext.Provider value={{ database, setDatabase }}>\r\n    {children}\r\n  </DatabaseContext.Provider>\r\n}\r\n\r\nfunction DataCard({ index, databaseContextObj }: { index: number, databaseContextObj?: DatabaseContextObj }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const [{ name, lastEdit }, setDbMeta] = useDBState(\"dbMeta\", dbMetaInit(index))\r\n  const current = !databaseContextObj\r\n  const [uploadOpen, onOpen, onClose] = useBoolState()\r\n  const { t } = useTranslation([\"settings\"]);\r\n  const numChar = database.chars.keys.length\r\n  const numArt = database.arts.values.length\r\n  const numWeapon = database.weapons.values.length\r\n  const hasData = Boolean(numChar || numArt || numWeapon)\r\n  const copyToClipboard = useCallback(\r\n    () => navigator.clipboard.writeText(JSON.stringify(exportGOOD(database.storage)))\r\n      .then(() => alert(\"Copied database to clipboard.\"))\r\n      .catch(console.error),\r\n    [database],\r\n  )\r\n  const onUpload = useCallback(() => {\r\n    onClose()\r\n    if (!current) {\r\n      const storage = database.storage as ExtraStorage\r\n      storage.saveStorage()\r\n    }\r\n  }, [onClose, current, database.storage])\r\n\r\n  const onDelete = useCallback(() => {\r\n    if (!window.confirm(`Are you sure you want to delete \"${name}\"?`)) return\r\n    if (current) {\r\n      database.clear()\r\n      setDatabase(new ArtCharDatabase(database.storage))\r\n    } else {\r\n      const storage = database.storage as ExtraStorage\r\n      const dbName = storage.databaseName\r\n      const extraStorage = new ExtraStorage(dbName)\r\n      extraStorage.setStorage({})\r\n      setDatabase(new ArtCharDatabase(extraStorage))\r\n      localStorage.removeItem(dbName)\r\n    }\r\n  }, [database, current, name, setDatabase])\r\n\r\n  const download = useCallback(() => {\r\n    const date = new Date()\r\n    const dateStr = date.toISOString().split(\".\")[0].replace(\"T\", \"_\").replaceAll(\":\", \"-\")\r\n    const JSONStr = JSON.stringify(exportGOOD(database.storage))\r\n    const filename = `${name.trim().replaceAll(\" \", \"_\")}_${dateStr}.json`\r\n    const contentType = \"application/json;charset=utf-8\"\r\n    const a = document.createElement('a');\r\n    a.download = filename\r\n    a.href = `data:${contentType},${encodeURIComponent(JSONStr)}`\r\n    a.target = \"_blank\"\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n  }, [database, name])\r\n\r\n  const onSwap = useCallback(() => {\r\n    if (!databaseContextObj) return\r\n\r\n    // save current database to appropriate slot\r\n    const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n    const tempStorage = new ExtraStorage(`extraDatabase_${dbIndex}`, databaseContextObj.database.storage)\r\n    tempStorage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    tempStorage.saveStorage()\r\n\r\n    // clear this slot database\r\n    const storage = database.storage as ExtraStorage\r\n    const dbName = storage.databaseName\r\n    localStorage.removeItem(dbName)\r\n\r\n    // swap over database\r\n    databaseContextObj.database.clear()\r\n    databaseContextObj.database.storage.copyFrom(database.storage)\r\n    databaseContextObj.database.storage.set(\"dbIndex\", index)\r\n    databaseContextObj.setDatabase(new ArtCharDatabase(databaseContextObj.database.storage))\r\n\r\n  }, [databaseContextObj, database, index])\r\n\r\n  const [tempName, setTempName] = useState(name)\r\n  useEffect(() => setTempName(name), [name])\r\n\r\n  const onBlur = useCallback(() => {\r\n    setDbMeta({ name: tempName })\r\n    if (!current) (database.storage as ExtraStorage).saveStorage()\r\n  }, [setDbMeta, tempName, database, current])\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n\r\n  return <CardDark sx={{ height: \"100%\", boxShadow: current ? \"0px 0px 0px 2px green inset\" : undefined }}>\r\n    <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n      < StyledInputBase value={tempName} sx={{ borderRadius: 1, px: 1, flexGrow: 1 }} onChange={(e) => setTempName(e.target.value)} onBlur={onBlur} onKeyDown={onKeyDOwn} />\r\n      {!current && <Button startIcon={<ImportExport />} onClick={onSwap} color=\"warning\">{t`DatabaseCard.button.swap`}</Button>}\r\n      <Chip color={current ? \"success\" : \"secondary\"} label={current ? t`DatabaseCard.currentDB` : `${t`DatabaseCard.title`} ${index}`} />\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Box display=\"flex\" gap={2}>\r\n        <Box flexGrow={1}>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.chars\" /> <strong>{numChar}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.arts\" /> <strong>{numArt}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.weapons\" /> <strong>{numWeapon}</strong></Typography>\r\n          {!!lastEdit && <Typography noWrap><strong>{(new Date(lastEdit).toLocaleString())}</strong></Typography>}\r\n        </Box>\r\n        <Box>\r\n          <Grid container spacing={1} columns={{ xs: 2 }} >\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeSvgIcon icon={faClipboard} />}>\r\n                <Trans t={t} i18nKey=\"DatabaseCard.button.copy\" />\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <ModalWrapper open={uploadOpen} onClose={onClose} >\r\n                <UploadCard onReplace={onUpload} />\r\n              </ModalWrapper>\r\n              <Button fullWidth component=\"span\" color=\"info\" startIcon={<Upload />} onClick={onOpen}>\r\n                {t`DatabaseCard.button.upload`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} onClick={download} startIcon={<Download />}>\r\n                {t`DatabaseCard.button.download`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"error\" onClick={onDelete} startIcon={<Delete />}>\r\n                {t`DatabaseCard.button.delete`}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { CardContent, Divider, MenuItem } from '@mui/material'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton'\r\nimport SqBadge from '../Components/SqBadge'\r\nimport { languageCodeList } from \"../i18n\"\r\nexport default function LanguageCard() {\r\n  const { t } = useTranslation();\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <LanguageDropdown />\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nconst nativeLanguages = {\r\n  \"chs\": \"中文 正体字\",\r\n  \"cht\": \"中文 繁體字\",\r\n  \"de\": \"Deutsch\",\r\n  \"en\": \"English\",\r\n  \"es\": \"español\",\r\n  \"fr\": \"français\",\r\n  \"id\": \"Bahasa Indonesia\",\r\n  \"ja\": \"日本語\",\r\n  \"ko\": \"한국어\",\r\n  \"pt\": \"Português\",\r\n  \"ru\": \"Русский язык\",\r\n  \"th\": \"ภาษาไทย\",\r\n  \"vi\": \"Tiếng Việt\"\r\n}\r\nexport function LanguageDropdown() {\r\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\r\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\r\n  const currentLang = i18n.languages[0];\r\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\r\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\r\n      <Trans i18nKey={`languages:${lang}`} />\r\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\r\n    </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Typography } from \"@mui/material\";\r\nimport CardLight from \"../Components/Card/CardLight\";\r\nimport { initGlobalSettings } from \"../stateInit\";\r\nimport useDBState from \"../ReactHooks/useDBState\";\r\n\r\nexport default function TCToggleCard() {\r\n  const [{ tcMode }, setGlobalSettings] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Typography gutterBottom color=\"warning.main\">Enabling this toggle will show some features that might be too complex for the average user.</Typography>\r\n      <Button fullWidth\r\n        onClick={() => setGlobalSettings({ tcMode: !tcMode })}\r\n        color={tcMode ? \"success\" : \"primary\"}\r\n        startIcon={tcMode ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n        Theorycrafting Mode\r\n      </Button>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { CardContent, Divider, Typography } from '@mui/material'\r\nimport ReactGA from 'react-ga4'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport DatabaseCard from './DatabaseCard'\r\nimport LanguageCard from './LanguageCard'\r\nimport TCToggleCard from './TCToggleCard'\r\n\r\nexport default function PageSettings() {\r\n  const { t } = useTranslation([\"settings\"]);\r\n  ReactGA.send({ hitType: \"pageview\", page: '/setting' })\r\n\r\n  return <CardDark sx={{ my: 1 }}>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"title\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <LanguageCard />\r\n      <DatabaseCard />\r\n      <TCToggleCard />\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { useCallback, useContext } from \"react\";\r\nimport { useNavigate, useMatch } from \"react-router\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { allSlotKeys, CharacterKey } from \"../Types/consts\";\r\nimport { defaultInitialWeapon } from \"../Util/WeaponUtil\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\n\r\n/**\r\n * Basically a history hook to go to the dedicated character page. Will create the character if it doesn't exist.\r\n * @returns\r\n */\r\nexport default function useCharSelectionCallback() {\r\n  const { database } = useContext(DatabaseContext)\r\n  const navigate = useNavigate()\r\n  // Used to maintain the previous tab, if there is one\r\n  let { params: { tab = \"\" } } = useMatch({ path: \"/characters/:charKey/:tab\", end: false }) ?? { params: { tab: \"\" } }\r\n  const cb = useCallback(\r\n    async (characterKey: CharacterKey) => {\r\n      const character = database.chars.get(characterKey)\r\n      let navTab = tab\r\n      // Create a new character + weapon, with linking if char isnt in db.\r\n      if (!character) {\r\n        const newChar = initialCharacter(characterKey)\r\n        database.chars.set(characterKey, newChar)\r\n        const characterSheet = await CharacterSheet.get(characterKey)\r\n        if (!characterSheet) return\r\n        const weapon = defaultInitialWeapon(characterSheet.weaponTypeKey)\r\n        const weaponId = database.weapons.new(weapon)\r\n        database.weapons.set(weaponId, { location: characterKey })\r\n        // If we are navigating to a new character,\r\n        // redirect to Overview, regardless of previous tab.\r\n        // Trying to enforce a certain UI flow when building new characters\r\n        navTab = \"\"\r\n      }\r\n      navigate(`/characters/${characterKey}/${navTab}`)\r\n    },\r\n    [navigate, database, tab],\r\n  )\r\n  return cb\r\n}\r\n\r\nexport function initialCharacter(key: CharacterKey): ICachedCharacter {\r\n  return {\r\n    key,\r\n    level: 1,\r\n    ascension: 0,\r\n    hitMode: \"avgHit\",\r\n    equippedArtifacts: objectKeyMap(allSlotKeys, () => \"\"),\r\n    equippedWeapon: \"\",\r\n    conditional: {},\r\n    bonusStats: {},\r\n    enemyOverride: {},\r\n    talent: {\r\n      auto: 1,\r\n      skill: 1,\r\n      burst: 1,\r\n    },\r\n    infusionAura: \"\",\r\n    constellation: 0,\r\n    team: [\"\", \"\", \"\"],\r\n    teamConditional: {},\r\n    compareData: false,\r\n    customMultiTarget: []\r\n  }\r\n}\r\n","import { allSubstatKeys } from \"./Types/artifact\"\r\n\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n\r\nexport function initCharMeta() {\r\n  return {\r\n    rvFilter: [...allSubstatKeys],\r\n    favorite: false\r\n  }\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');"],"names":["createSvgIcon","_jsx","d","GOSource","exportGOOD","storage","artifactIDs","Map","artifacts","entries","filter","startsWith","map","i","id","value","set","JSON","parse","format","dbVersion","currentDBVersion","source","version","characters","weapons","states","key","split","buildSettings","result","builds","x","has","get","cx","cy","rx","ry","importGOOD","data","type","import","invalid","new","updated","unchanged","removed","dbTotal","notInImport","newImportResult","forEach","a","parseArtifact","push","w","parseWeapon","c","parseCharacter","extra","s","buildDate","b","importGOOD1","merge","base","partial","disjoint","artCounter","weaponCounter","charCounter","length","idsToRemove","Set","chars","keys","char","match","delete","matchRest","level","constellation","ascension","talent","idtoRemoveArr","Array","from","k","remove","values","migrateLocation","matchId","location","initialCharacter","arts","hasLocations","some","art","duplicated","upgraded","findDups","weapon","findDup","ensureEquipment","rest","InvisInput","styled","display","UploadCard","onReplace","database","useContext","DatabaseContext","t","useTranslation","useState","setdata","filename","setfilename","errorMsg","setErrorMsg","setPartial","setDisjoint","useMemo","parsed","e","imported","copyStorage","SandboxStorage","copyFrom","importResult","importedDatabase","ArtCharDatabase","onUpload","file","target","files","name","reader","FileReader","onload","readAsText","CardLight","CardContent","sx","py","Trans","i18nKey","Grid","container","spacing","mb","item","htmlFor","accept","onChange","Button","component","startIcon","Upload","flexGrow","CardDark","px","Typography","icon","faFileCode","faArrowLeft","gap","flexWrap","Tooltip","title","variant","gutterBottom","placement","arrow","flexBasis","fullWidth","disabled","onClick","JoinLeft","JoinFull","Splitscreen","MergeType","width","fontFamily","minHeight","resize","GOODUploadInfo","GOUploadAction","reset","Divider","MergeResult","total","color","stringify","undefined","setDatabase","replaceDB","useCallback","dbLStorage","DBLocalStorage","localStorage","faFileUpload","DatabaseCard","databaseContextObj","dbIndex","parseInt","getString","flexDirection","columns","xs","md","range","DataCard","index","ExtraDatabaseWrapper","children","dbName","ExtraStorage","dbObj","getItem","setStorage","removeForKeys","db","saveStorage","Database","useDBState","dbMetaInit","lastEdit","setDbMeta","current","useBoolState","uploadOpen","onOpen","onClose","numChar","numArt","numWeapon","hasData","Boolean","copyToClipboard","navigator","clipboard","writeText","then","alert","catch","console","error","onDelete","window","confirm","clear","databaseName","extraStorage","removeItem","download","dateStr","Date","toISOString","replace","replaceAll","JSONStr","trim","document","createElement","href","encodeURIComponent","body","appendChild","click","removeChild","onSwap","tempStorage","tempName","setTempName","useEffect","onBlur","onKeyDOwn","height","boxShadow","justifyContent","borderRadius","onKeyDown","ImportExport","Chip","label","Box","noWrap","toLocaleString","FontAwesomeSvgIcon","faClipboard","ModalWrapper","open","Download","Delete","LanguageCard","SqBadge","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","DropdownButton","language","languageCodeList","MenuItem","selected","TCToggleCard","initGlobalSettings","tcMode","setGlobalSettings","CheckBox","CheckBoxOutlineBlank","PageSettings","ReactGA","hitType","page","my","useCharSelectionCallback","navigate","useNavigate","useMatch","path","end","params","tab","cb","characterKey","character","navTab","newChar","CharacterSheet","characterSheet","defaultInitialWeapon","weaponTypeKey","weaponId","hitMode","equippedArtifacts","objectKeyMap","allSlotKeys","equippedWeapon","conditional","bonusStats","enemyOverride","auto","skill","burst","infusionAura","team","teamConditional","compareData","customMultiTarget","initCharMeta","rvFilter","allSubstatKeys","favorite"],"sourceRoot":""}