{"version":3,"file":"static/js/653.6837eed0.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/ImportExport.js","../node_modules/@mui/icons-material/esm/Upload.js","../node_modules/@mui/icons-material/esm/Delete.js","Database/exim.ts","Database/exports/good.ts","../node_modules/@mui/icons-material/esm/FileOpen.js","Database/imports/good.ts","PageSettings/UploadCard.tsx","PageSettings/DatabaseCard.tsx","PageSettings/LanguageCard.tsx","PageSettings/TCToggleCard.tsx","PageSettings/index.tsx","stateInit.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 3 5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"\n}), 'ImportExport');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import type { IArtifact } from \"../Types/artifact\"\r\nimport type { ICharacter } from \"../Types/character\"\r\nimport type { IWeapon } from \"../Types/weapon\"\r\n\r\nexport const GOSource = \"Genshin Optimizer\" as const\r\n\r\nfunction newCounter<T>(): ImportResultCounter<T> {\r\n  return { import: 0, invalid: [], new: [], update: [], unchanged: [], remove: [], notInImport: 0, beforeMerge: 0 }\r\n}\r\n\r\nexport function newImportResult(source: string): ImportResult {\r\n  return { type: \"GOOD\", source, artifacts: newCounter(), weapons: newCounter(), characters: newCounter() }\r\n}\r\nexport type IGOOD = {\r\n  format: \"GOOD\"\r\n  source: string\r\n  version: 1\r\n  characters?: any[]\r\n  artifacts?: any[]\r\n  weapons?: any[]\r\n}\r\nexport type IGO = {\r\n  dbVersion: number\r\n  source: typeof GOSource\r\n  states?: object[]\r\n  buildSettings?: object[]\r\n}\r\n\r\nexport type ImportResultCounter<T> = {\r\n  import: number, // total # in file\r\n  new: T[],\r\n  update: T[], // Use new object\r\n  unchanged: T[], // Use new object\r\n  remove: T[],\r\n  invalid: T[],\r\n  notInImport: number,\r\n  beforeMerge: number,\r\n}\r\nexport type ImportResult = {\r\n  type: \"GOOD\",\r\n  source: string,\r\n  artifacts: ImportResultCounter<IArtifact>,\r\n  weapons: ImportResultCounter<IWeapon>,\r\n  characters: ImportResultCounter<ICharacter>,\r\n}\r\n","\r\nimport { DBStorage } from \"../DBStorage\";\r\nimport { BuildSetting } from \"../Data/BuildsettingData\";\r\nimport { GOSource, IGO, IGOOD } from \"../exim\";\r\nimport { currentDBVersion } from \"../imports/migrate\";\r\n\r\nexport function exportGOOD(storage: DBStorage): IGOOD & IGO {\r\n  const artifactIDs = new Map<string, number>()\r\n  const artifacts = storage.entries\r\n    .filter(([key]) => key.startsWith(\"artifact_\"))\r\n    .map(([id, value], i) => {\r\n      artifactIDs.set(id, i)\r\n      return JSON.parse(value)\r\n    })\r\n  return {\r\n    format: \"GOOD\",\r\n    dbVersion: currentDBVersion,\r\n    source: GOSource,\r\n    version: 1,\r\n    characters: storage.entries\r\n      .filter(([key]) => key.startsWith(\"char_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    artifacts,\r\n    weapons: storage.entries\r\n      .filter(([key]) => key.startsWith(\"weapon_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    states: storage.entries\r\n      .filter(([key]) => key.startsWith(\"state_\"))\r\n      .map(([key, value]) => ({ ...JSON.parse(value), key: key.split(\"state_\")[1] })),\r\n    buildSettings: storage.entries\r\n      .filter(([key]) => key.startsWith(\"buildSetting_\"))\r\n      .map(([key, value]) => {\r\n        const result: BuildSetting = { ...JSON.parse(value), key: key.split(\"buildSetting_\")[1] }\r\n        // Make sure the artifact ids match the new ids after import\r\n        result.builds = result.builds.map(x => x.map(x => artifactIDs.has(x) ? `artifact_${artifactIDs.get(x)}` : \"\").filter(x => x))\r\n        return result\r\n      }),\r\n  }\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M14 2H6c-1.1 0-2 .9-2 2v16c0 1.1.89 2 1.99 2H15v-8h5V8l-6-6zm-1 7V3.5L18.5 9H13zm4 12.66V16h5.66v2h-2.24l2.95 2.95-1.41 1.41L19 19.41v2.24h-2z\"\n}), 'FileOpen');","import { ArtCharDatabase } from \"../Database\";\r\nimport { GOSource, IGOOD, ImportResult, newImportResult } from \"../exim\";\r\n\r\n// MIGRATION STEP: Always keep parsing in sync with GOODv1 format\r\n\r\nexport function importGOOD(good: IGOOD, base: ArtCharDatabase, keepNotInImport: boolean, ignoreDups: boolean): ImportResult | undefined {\r\n  switch (good.version) {\r\n    case 1: return importGOOD1(good, base, keepNotInImport, ignoreDups)\r\n  }\r\n}\r\n\r\n/**\r\n * Parse GOODv1 data format into a parsed data of the version specified in `data`.\r\n * If the DB version is not specified, the default version is used.\r\n */\r\nfunction importGOOD1(good: IGOOD, base: ArtCharDatabase, keepNotInImport: boolean, ignoreDups: boolean): ImportResult | undefined {\r\n  const source = good.source ?? \"Unknown\"\r\n  const result: ImportResult = newImportResult(source)\r\n\r\n  result.characters.beforeMerge = base.chars.values.length\r\n  result.weapons.beforeMerge = base.weapons.values.length\r\n  result.artifacts.beforeMerge = base.arts.values.length\r\n\r\n  const callback = (rkey: \"artifacts\" | \"weapons\" | \"characters\") => (key, reason, value) => result[rkey][reason].push(value)\r\n\r\n  const charUnfollow = base.chars.followAny((key, reason, value) => {\r\n    const arr = result.characters[reason]\r\n    const ind = arr.findIndex(c => c.key === key)\r\n    if (ind < 0) arr.push(value)\r\n    else arr[ind] = value\r\n  })\r\n  const artUnfollow = base.arts.followAny(callback(\"artifacts\"))\r\n  const weaponUnfollow = base.weapons.followAny(callback(\"weapons\"))\r\n\r\n  /* IMPORTANT: import data in characters, weapons, artifacts order. */\r\n  // import characters\r\n  const characters = good.characters\r\n  if (characters) {\r\n    result.characters.import = characters.length\r\n    const idsToRemove = new Set(base.chars.keys)\r\n    characters.forEach(c => {\r\n      if (!c.key) result.characters.invalid.push(c)\r\n      idsToRemove.delete(c.key)\r\n      if (base.chars.hasDup(c, source === GOSource))\r\n        result.characters.unchanged.push(c)\r\n      else base.chars.set(c.key, c)\r\n    })\r\n\r\n    const idtoRemoveArr = Array.from(idsToRemove)\r\n    if (keepNotInImport || ignoreDups) result.characters.notInImport = idtoRemoveArr.length\r\n    else idtoRemoveArr.forEach(k => base.chars.remove(k))\r\n    result.characters.unchanged = []\r\n  } else result.characters.notInImport = base.chars.values.length\r\n\r\n  // Match weapons for counter, metadata, and locations.\r\n  const weapons = good.weapons\r\n  if (weapons) {\r\n    result.weapons.import = weapons.length\r\n    const idsToRemove = new Set(base.weapons.values.map(w => w.id))\r\n    weapons.forEach(w => {\r\n      const weapon = base.weapons.validate(w)\r\n      if (!weapon) return result.weapons.invalid.push(w)\r\n      let { duplicated, upgraded } = ignoreDups ? { duplicated: [], upgraded: [] } : base.weapons.findDup(weapon)\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\r\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\r\n\r\n      if (duplicated[0]) {\r\n        const match = duplicated[0] || upgraded[0]\r\n        idsToRemove.delete(match.id)\r\n        if (duplicated[0] && duplicated[0].location === weapon.location)\r\n          result.weapons.unchanged.push(weapon)\r\n        else base.weapons.set(match.id, weapon)\r\n      } else\r\n        base.weapons.new(weapon)\r\n    })\r\n    const idtoRemoveArr = Array.from(idsToRemove)\r\n    if (keepNotInImport || ignoreDups) result.weapons.notInImport = idtoRemoveArr.length\r\n    else idtoRemoveArr.forEach(k => base.weapons.remove(k))\r\n  } else result.weapons.notInImport = base.weapons.values.length\r\n\r\n  // Match artifacts for counter, metadata, and locations\r\n  const artifacts = good.artifacts\r\n  if (artifacts) {\r\n    result.artifacts.import = artifacts.length\r\n    const idsToRemove = new Set(base.arts.values.map(a => a.id))\r\n    artifacts.forEach(a => {\r\n      const art = base.arts.validate(a)\r\n      if (!art) return result.artifacts.invalid.push(a)\r\n      let { duplicated, upgraded } = ignoreDups ? { duplicated: [], upgraded: [] } : base.arts.findDups(art)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\r\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\r\n\r\n      if (duplicated[0]) {\r\n        const match = duplicated[0] || upgraded[0]\r\n        idsToRemove.delete(match.id)\r\n        if (duplicated[0] && duplicated[0].location === art.location)\r\n          result.artifacts.unchanged.push(art)\r\n        else base.arts.set(match.id, art)\r\n      } else\r\n        base.arts.new(art)\r\n    })\r\n    const idtoRemoveArr = Array.from(idsToRemove)\r\n    if (keepNotInImport || ignoreDups) result.artifacts.notInImport = idtoRemoveArr.length\r\n    else idtoRemoveArr.forEach(k => base.arts.remove(k))\r\n  } else result.artifacts.notInImport = base.arts.values.length\r\n\r\n  // stop listening to callbacks\r\n  charUnfollow()\r\n  artUnfollow()\r\n  weaponUnfollow()\r\n\r\n  // import extras\r\n  const states = (result as any).states\r\n  if (states) states.forEach(s => {\r\n    const { key, ...rest } = s as any\r\n    if (!key) return\r\n    base.states.set(key, rest)\r\n  })\r\n\r\n  const buildSettings = (result as any).buildSettings\r\n  if (buildSettings) buildSettings.forEach(b => {\r\n    // do not preserve the import builds, since their ids will be invalid.\r\n    const { key, builds, buildDate, ...rest } = b as any\r\n\r\n    if (!key) return\r\n    // Do not import builds\r\n    base.states.set(key, { ...rest })\r\n  })\r\n  return result\r\n}\r\n","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { CheckBox, CheckBoxOutlineBlank, FileOpen, JoinFull, JoinLeft, MergeType, Splitscreen } from '@mui/icons-material'\r\nimport { Box, Button, CardContent, Divider, Grid, styled, Tooltip, Typography } from '@mui/material'\r\nimport { useCallback, useContext, useMemo, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport { SandboxStorage } from '../Database/DBStorage'\r\nimport { ImportResult, ImportResultCounter } from '../Database/exim'\r\nimport { importGOOD } from '../Database/imports/good'\r\n\r\nconst InvisInput = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadCard({ onReplace }: { onReplace: () => void }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\");\r\n  const [data, setdata] = useState(\"\")\r\n  const [filename, setfilename] = useState(\"\")\r\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\r\n  const [keepNotInImport, setKeepNotInImport] = useState(false)\r\n  const [ignoreDups, setIgnoreDups] = useState(false)\r\n  const { importResult, importedDatabase } = useMemo(() => {\r\n    if (!data) return\r\n    let parsed: any\r\n    try {\r\n      parsed = JSON.parse(data)\r\n      if (typeof parsed !== \"object\") {\r\n        setErrorMsg(\"uploadCard.error.jsonParse\")\r\n        return\r\n      }\r\n    } catch (e) {\r\n      setErrorMsg(\"uploadCard.error.jsonParse\")\r\n      return\r\n    }\r\n    // Figure out the file format\r\n    if (parsed.format === \"GOOD\") {\r\n      // Parse as GOOD format\r\n      const copyStorage = new SandboxStorage()\r\n      copyStorage.copyFrom(database.storage)\r\n      const importedDatabase = new ArtCharDatabase(copyStorage)\r\n      const importResult = importGOOD(parsed, importedDatabase, keepNotInImport, ignoreDups)\r\n      if (!importResult) {\r\n        setErrorMsg(\"uploadCard.error.goInvalid\")\r\n        return\r\n      }\r\n\r\n      return { importResult, importedDatabase }\r\n    }\r\n    setErrorMsg(\"uploadCard.error.unknown\")\r\n    return\r\n  }, [data, database, keepNotInImport, ignoreDups]) ?? {}\r\n  const reset = () => {\r\n    setdata(\"\")\r\n    setfilename(\"\")\r\n    onReplace()\r\n  }\r\n  const onUpload = async e => {\r\n    const file = e.target.files[0]\r\n    e.target.value = null // reset the value so the same file can be uploaded again...\r\n    if (file) setfilename(file.name)\r\n    const reader = new FileReader()\r\n    reader.onload = () => setdata(reader.result as string)\r\n    reader.readAsText(file)\r\n  }\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\r\n    <CardContent>\r\n      <Grid container spacing={2} sx={{ mb: 1 }}>\r\n        <Grid item>\r\n          <label htmlFor=\"icon-button-file\">\r\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\r\n            <Button component=\"span\" color=\"info\" startIcon={<FileOpen />}>{t`uploadCard.buttons.open`}</Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <CardDark sx={{ px: 2, py: 1 }}>\r\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\r\n          </CardDark>\r\n        </Grid>\r\n      </Grid>\r\n      <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n        <Tooltip title={<Typography>\r\n          {ignoreDups ? t`uploadCard.tooltip.ignoreDup` : t`uploadCard.tooltip.detectdup`}\r\n        </Typography>} placement='top' arrow >\r\n          <Box sx={{ flexGrow: 1, flexBasis: \"10em\" }}><Button fullWidth disabled={!data} color={ignoreDups ? \"primary\" : \"success\"} onClick={() => setIgnoreDups(!ignoreDups)} startIcon={ignoreDups ? <CheckBoxOutlineBlank /> : <CheckBox />}>\r\n            {t`uploadCard.buttons.detectDups`}\r\n          </Button></Box>\r\n        </Tooltip>\r\n        <Tooltip title={<Typography>\r\n          {keepNotInImport ? t`uploadCard.tooltip.keepNotInImport` : t`uploadCard.tooltip.delNotInImport`}\r\n        </Typography>} placement='top' arrow >\r\n          <Box sx={{ flexGrow: 1, flexBasis: \"10em\" }}><Button fullWidth disabled={!data} color={keepNotInImport ? \"primary\" : \"success\"} onClick={() => setKeepNotInImport(!keepNotInImport)} startIcon={keepNotInImport ? <CheckBoxOutlineBlank /> : <CheckBox />} >\r\n            {t`uploadCard.buttons.delNotInImport`}\r\n          </Button></Box>\r\n        </Tooltip>\r\n      </Box>\r\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\r\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\r\n      {(importResult && importedDatabase) ? <GOODUploadInfo importResult={importResult} importedDatabase={importedDatabase} /> : t(errorMsg)}\r\n    </CardContent>\r\n    <GOUploadAction importedDatabase={importedDatabase} reset={reset} />\r\n  </CardLight>\r\n}\r\n\r\nfunction GOODUploadInfo({ importResult: { source, artifacts, characters, weapons }, importedDatabase }: { importResult: ImportResult, importedDatabase: ArtCharDatabase }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      <Grid container spacing={2}>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={artifacts} dbTotal={importedDatabase.arts.values.length} type=\"arts\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={weapons} dbTotal={importedDatabase.weapons.values.length} type=\"weapons\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={characters} dbTotal={importedDatabase.chars.values.length} type=\"chars\" />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\nfunction MergeResult({ result, dbTotal, type }: { result: ImportResultCounter<any>, dbTotal: number, type: string }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  const total = result.import\r\n  return <CardLight >\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey={`count.${type}`} /> {total}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new.length}</strong> / {total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged.length}</strong> / {total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.update.length}</strong></Typography>\r\n      {!!result.remove.length && <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.remove.length}</strong></Typography>}\r\n      {!!result.notInImport && <Typography><Trans t={t} i18nKey=\"count.notInImport\" /> <strong>{result.notInImport}</strong></Typography>}\r\n      <Typography><Trans t={t} i18nKey=\"count.dbTotal\" /> <strong>{result.beforeMerge}</strong> -&gt; <strong>{dbTotal}</strong></Typography>\r\n      {!!result.invalid?.length && <div>\r\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {total}</Typography>\r\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\r\n      </div>}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nfunction GOUploadAction({ importedDatabase, reset }: { importedDatabase?: ArtCharDatabase, reset: () => void }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\")\r\n  const replaceDB = useCallback(() => {\r\n    if (!importedDatabase) return\r\n    database.clear()\r\n    database.storage.copyFrom(importedDatabase.storage)\r\n    setDatabase(new ArtCharDatabase(database.storage))\r\n    reset()\r\n  }, [database, importedDatabase, reset, setDatabase])\r\n\r\n\r\n  return <><Divider /><CardContent sx={{ py: 1 }}>\r\n    <Button color={importedDatabase ? \"success\" : \"error\"} disabled={!importedDatabase} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\r\n  </CardContent></>\r\n}\r\n","import { faClipboard } from '@fortawesome/free-solid-svg-icons'\r\nimport { Delete, Download, ImportExport, Upload } from '@mui/icons-material'\r\nimport { Button, CardContent, Chip, Divider, Grid, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { StyledInputBase } from '../Components/CustomNumberInput'\r\nimport FontAwesomeSvgIcon from '../Components/FontAwesomeSvgIcon'\r\nimport ModalWrapper from '../Components/ModalWrapper'\r\nimport { ArtCharDatabase, DatabaseContext, DatabaseContextObj } from \"../Database/Database\"\r\nimport { ExtraStorage } from '../Database/DBStorage'\r\nimport { exportGOOD } from '../Database/exports/good'\r\nimport useBoolState from '../ReactHooks/useBoolState'\r\nimport useDBState, { dbMetaInit } from '../ReactHooks/useDBState'\r\nimport { range } from '../Util/Util'\r\nimport UploadCard from './UploadCard'\r\n\r\nexport default function DatabaseCard() {\r\n  const databaseContextObj = useContext(DatabaseContext)\r\n  const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n  const { t } = useTranslation([\"settings\"]);\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        {t`DatabaseCard.title`}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <Grid container spacing={2} columns={{ xs: 1, md: 2, }}>\r\n        {range(1, 4).map(i => <Grid key={i} item xs={1}>\r\n          {i === dbIndex ? <DataCard index={i} /> :\r\n            <ExtraDatabaseWrapper index={i}>\r\n              <DataCard index={i} databaseContextObj={databaseContextObj} />\r\n            </ExtraDatabaseWrapper>}\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent >\r\n  </CardLight >\r\n}\r\nfunction ExtraDatabaseWrapper({ index, children }) {\r\n  const [database, setDatabase] = useState(() => {\r\n    const dbName = `extraDatabase_${index}`\r\n    const storage = new ExtraStorage(dbName)\r\n    const dbObj = JSON.parse(localStorage.getItem(dbName) ?? `{ \"dbIndex\": \"${index}\" }`)\r\n    storage.setStorage(dbObj)\r\n\r\n    // A bit of preventive programming\r\n    storage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    const db = new ArtCharDatabase(storage)\r\n    storage.saveStorage()\r\n    return db\r\n  })\r\n\r\n  return <DatabaseContext.Provider value={{ database, setDatabase }}>\r\n    {children}\r\n  </DatabaseContext.Provider>\r\n}\r\n\r\nfunction DataCard({ index, databaseContextObj }: { index: number, databaseContextObj?: DatabaseContextObj }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const [{ name, lastEdit }, setDbMeta] = useDBState(\"dbMeta\", dbMetaInit(index))\r\n  const current = !databaseContextObj\r\n  const [uploadOpen, onOpen, onClose] = useBoolState()\r\n  const { t } = useTranslation([\"settings\"]);\r\n  const numChar = database.chars.keys.length\r\n  const numArt = database.arts.values.length\r\n  const numWeapon = database.weapons.values.length\r\n  const hasData = Boolean(numChar || numArt || numWeapon)\r\n  const copyToClipboard = useCallback(\r\n    () => navigator.clipboard.writeText(JSON.stringify(exportGOOD(database.storage)))\r\n      .then(() => alert(\"Copied database to clipboard.\"))\r\n      .catch(console.error),\r\n    [database],\r\n  )\r\n  const onUpload = useCallback(() => {\r\n    onClose()\r\n    if (!current) {\r\n      const storage = database.storage as ExtraStorage\r\n      storage.saveStorage()\r\n    }\r\n  }, [onClose, current, database.storage])\r\n\r\n  const onDelete = useCallback(() => {\r\n    if (!window.confirm(`Are you sure you want to delete \"${name}\"?`)) return\r\n    if (current) {\r\n      database.clear()\r\n      setDatabase(new ArtCharDatabase(database.storage))\r\n    } else {\r\n      const storage = database.storage as ExtraStorage\r\n      const dbName = storage.databaseName\r\n      const extraStorage = new ExtraStorage(dbName)\r\n      extraStorage.setStorage({})\r\n      setDatabase(new ArtCharDatabase(extraStorage))\r\n      localStorage.removeItem(dbName)\r\n    }\r\n  }, [database, current, name, setDatabase])\r\n\r\n  const download = useCallback(() => {\r\n    const date = new Date()\r\n    const dateStr = date.toISOString().split(\".\")[0].replace(\"T\", \"_\").replaceAll(\":\", \"-\")\r\n    const JSONStr = JSON.stringify(exportGOOD(database.storage))\r\n    const filename = `${name.trim().replaceAll(\" \", \"_\")}_${dateStr}.json`\r\n    const contentType = \"application/json;charset=utf-8\"\r\n    const a = document.createElement('a');\r\n    a.download = filename\r\n    a.href = `data:${contentType},${encodeURIComponent(JSONStr)}`\r\n    a.target = \"_blank\"\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n  }, [database, name])\r\n\r\n  const onSwap = useCallback(() => {\r\n    if (!databaseContextObj) return\r\n\r\n    // save current database to appropriate slot\r\n    const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n    const tempStorage = new ExtraStorage(`extraDatabase_${dbIndex}`, databaseContextObj.database.storage)\r\n    tempStorage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    tempStorage.saveStorage()\r\n\r\n    // clear this slot database\r\n    const storage = database.storage as ExtraStorage\r\n    const dbName = storage.databaseName\r\n    localStorage.removeItem(dbName)\r\n\r\n    // swap over database\r\n    databaseContextObj.database.clear()\r\n    databaseContextObj.database.storage.copyFrom(database.storage)\r\n    databaseContextObj.database.storage.set(\"dbIndex\", index)\r\n    databaseContextObj.setDatabase(new ArtCharDatabase(databaseContextObj.database.storage))\r\n\r\n  }, [databaseContextObj, database, index])\r\n\r\n  const [tempName, setTempName] = useState(name)\r\n  useEffect(() => setTempName(name), [name])\r\n\r\n  const onBlur = useCallback(() => {\r\n    setDbMeta({ name: tempName })\r\n    if (!current) (database.storage as ExtraStorage).saveStorage()\r\n  }, [setDbMeta, tempName, database, current])\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n\r\n  return <CardDark sx={{ height: \"100%\", boxShadow: current ? \"0px 0px 0px 2px green inset\" : undefined }}>\r\n    <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n      < StyledInputBase value={tempName} sx={{ borderRadius: 1, px: 1, flexGrow: 1 }} onChange={(e) => setTempName(e.target.value)} onBlur={onBlur} onKeyDown={onKeyDOwn} />\r\n      {!current && <Button startIcon={<ImportExport />} onClick={onSwap} color=\"warning\">{t`DatabaseCard.button.swap`}</Button>}\r\n      <Chip color={current ? \"success\" : \"secondary\"} label={current ? t`DatabaseCard.currentDB` : `${t`DatabaseCard.title`} ${index}`} />\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Box display=\"flex\" gap={2}>\r\n        <Box flexGrow={1}>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.chars\" /> <strong>{numChar}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.arts\" /> <strong>{numArt}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.weapons\" /> <strong>{numWeapon}</strong></Typography>\r\n          {!!lastEdit && <Typography noWrap><strong>{(new Date(lastEdit).toLocaleString())}</strong></Typography>}\r\n        </Box>\r\n        <Box>\r\n          <Grid container spacing={1} columns={{ xs: 2 }} >\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeSvgIcon icon={faClipboard} />}>\r\n                <Trans t={t} i18nKey=\"DatabaseCard.button.copy\" />\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <ModalWrapper open={uploadOpen} onClose={onClose} >\r\n                <UploadCard onReplace={onUpload} />\r\n              </ModalWrapper>\r\n              <Button fullWidth component=\"span\" color=\"info\" startIcon={<Upload />} onClick={onOpen}>\r\n                {t`DatabaseCard.button.upload`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} onClick={download} startIcon={<Download />}>\r\n                {t`DatabaseCard.button.download`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"error\" onClick={onDelete} startIcon={<Delete />}>\r\n                {t`DatabaseCard.button.delete`}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { CardContent, Divider, MenuItem } from '@mui/material'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton'\r\nimport SqBadge from '../Components/SqBadge'\r\nimport { languageCodeList } from \"../i18n\"\r\nexport default function LanguageCard() {\r\n  const { t } = useTranslation();\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <LanguageDropdown />\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nconst nativeLanguages = {\r\n  \"chs\": \"中文 正体字\",\r\n  \"cht\": \"中文 繁體字\",\r\n  \"de\": \"Deutsch\",\r\n  \"en\": \"English\",\r\n  \"es\": \"español\",\r\n  \"fr\": \"français\",\r\n  \"id\": \"Bahasa Indonesia\",\r\n  \"ja\": \"日本語\",\r\n  \"ko\": \"한국어\",\r\n  \"pt\": \"Português\",\r\n  \"ru\": \"Русский язык\",\r\n  \"th\": \"ภาษาไทย\",\r\n  \"vi\": \"Tiếng Việt\"\r\n}\r\nexport function LanguageDropdown() {\r\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\r\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\r\n  const currentLang = i18n.languages[0];\r\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\r\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\r\n      <Trans i18nKey={`languages:${lang}`} />\r\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\r\n    </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Typography } from \"@mui/material\";\r\nimport CardLight from \"../Components/Card/CardLight\";\r\nimport { initGlobalSettings } from \"../stateInit\";\r\nimport useDBState from \"../ReactHooks/useDBState\";\r\n\r\nexport default function TCToggleCard() {\r\n  const [{ tcMode }, setGlobalSettings] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Typography gutterBottom color=\"warning.main\">Enabling this toggle will show some features that might be too complex for the average user.</Typography>\r\n      <Button fullWidth\r\n        onClick={() => setGlobalSettings({ tcMode: !tcMode })}\r\n        color={tcMode ? \"success\" : \"primary\"}\r\n        startIcon={tcMode ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n        Theorycrafting Mode\r\n      </Button>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { CardContent, Divider, Typography } from '@mui/material'\r\nimport ReactGA from 'react-ga4'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport DatabaseCard from './DatabaseCard'\r\nimport LanguageCard from './LanguageCard'\r\nimport TCToggleCard from './TCToggleCard'\r\n\r\nexport default function PageSettings() {\r\n  const { t } = useTranslation([\"settings\"]);\r\n  ReactGA.send({ hitType: \"pageview\", page: '/setting' })\r\n\r\n  return <CardDark sx={{ my: 1 }}>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"title\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <LanguageCard />\r\n      <DatabaseCard />\r\n      <TCToggleCard />\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { allSubstatKeys } from \"./Types/artifact\"\r\n\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n\r\nexport function initCharMeta() {\r\n  return {\r\n    rvFilter: [...allSubstatKeys],\r\n    favorite: false\r\n  }\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');"],"names":["createSvgIcon","_jsx","d","GOSource","exportGOOD","storage","artifactIDs","Map","artifacts","entries","filter","startsWith","map","i","id","value","set","JSON","parse","format","dbVersion","currentDBVersion","source","version","characters","weapons","states","key","split","buildSettings","result","builds","x","has","get","importGOOD","good","base","keepNotInImport","ignoreDups","type","import","invalid","new","update","unchanged","remove","notInImport","beforeMerge","newImportResult","chars","values","length","arts","callback","rkey","reason","push","charUnfollow","followAny","arr","ind","findIndex","c","artUnfollow","weaponUnfollow","idsToRemove","Set","keys","forEach","delete","hasDup","idtoRemoveArr","Array","from","k","w","weapon","validate","duplicated","upgraded","findDup","a","match","location","art","findDups","s","rest","b","buildDate","importGOOD1","InvisInput","styled","display","UploadCard","onReplace","database","useContext","DatabaseContext","t","useTranslation","useState","data","setdata","filename","setfilename","errorMsg","setErrorMsg","setKeepNotInImport","setIgnoreDups","useMemo","parsed","e","copyStorage","SandboxStorage","copyFrom","importedDatabase","ArtCharDatabase","importResult","onUpload","file","target","files","name","reader","FileReader","onload","readAsText","CardLight","CardContent","sx","py","Trans","i18nKey","Grid","container","spacing","mb","item","htmlFor","accept","onChange","Button","component","color","startIcon","FileOpen","flexGrow","CardDark","px","Typography","icon","faFileCode","faArrowLeft","gap","flexWrap","Tooltip","title","placement","arrow","flexBasis","fullWidth","disabled","onClick","CheckBoxOutlineBlank","CheckBox","gutterBottom","variant","width","fontFamily","minHeight","resize","GOODUploadInfo","GOUploadAction","reset","Divider","MergeResult","dbTotal","total","stringify","undefined","setDatabase","replaceDB","useCallback","clear","faFileUpload","DatabaseCard","databaseContextObj","dbIndex","parseInt","getString","flexDirection","columns","xs","md","range","DataCard","index","ExtraDatabaseWrapper","children","dbName","ExtraStorage","dbObj","localStorage","getItem","setStorage","removeForKeys","db","saveStorage","Database","useDBState","dbMetaInit","lastEdit","setDbMeta","current","useBoolState","uploadOpen","onOpen","onClose","numChar","numArt","numWeapon","hasData","Boolean","copyToClipboard","navigator","clipboard","writeText","then","alert","catch","console","error","onDelete","window","confirm","databaseName","extraStorage","removeItem","download","dateStr","Date","toISOString","replace","replaceAll","JSONStr","trim","document","createElement","href","encodeURIComponent","body","appendChild","click","removeChild","onSwap","tempStorage","tempName","setTempName","useEffect","onBlur","onKeyDOwn","height","boxShadow","justifyContent","borderRadius","onKeyDown","ImportExport","Chip","label","Box","noWrap","toLocaleString","FontAwesomeSvgIcon","faClipboard","ModalWrapper","open","Upload","Download","Delete","LanguageCard","SqBadge","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","DropdownButton","language","languageCodeList","MenuItem","selected","TCToggleCard","initGlobalSettings","tcMode","setGlobalSettings","PageSettings","ReactGA","hitType","page","my","initCharMeta","rvFilter","allSubstatKeys","favorite"],"sourceRoot":""}